import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit
import pandas as pd
from scipy.integrate import simpson

# import data from txt
filename = 'Banana fresh.csv'
data = np.genfromtxt(filename , delimiter=',', skip_header=1)

# extract x and y values from the data
x = data[:, 2]
ya = data[:, 3]

ya = ya[0: 509]       # remove spike to inf
x = x[0: 509]


plt.plot(x, ya, 'steelblue')
plt.grid()
plt.title('Measurement count - Energy ' + filename) 
plt.ylabel('Counts') 
plt.xlabel('Energy (Kev)')
plt.show()

X = np.argsort(x)
x_new = np.zeros(len(X), dtype=float)

for i in range(0, len(X)):
    x_new[i] = x[X[i]]

plt.plot(X, ya)     # plots counts as function of indexes - 
plt.grid()          # so that the data range can be selected for gaussian
plt.show()



lower_lim = input('Lower index limit for Gaussian fitting: ')
upper_lim = input('Upper index limit for Gaussian fitting: ')
x_gauss = x_new[int(lower_lim) : int(upper_lim)]
y_gauss = ya[int(lower_lim) : int(upper_lim)]


def func(x_gauss, *params):
    y = np.zeros(len(x_gauss), dtype=float)
    for i in range(0, len(params), 3):
        cntr = params[i]
        amp = params[i+1]
        wid = params[i+2]
        y = y + amp * np.exp( -((x_gauss - cntr)/ wid)**2 )
    return y


guess_3 = 1460
guess_4 = 100
guess_5 = 30
guess = [guess_3, guess_4, guess_5]

popt, pcov = curve_fit(func, x_gauss, y_gauss, p0=guess, maxfev=8000)
fit = func(x_gauss, *popt)
sigma = np.abs(popt[2]) / 2.355
d_params = np.sqrt(np.diag(pcov))

print('Energy peak (central max) =\t %.3f ' % popt[0],'\nCount rate max =\t %.3f' % popt[1], '\nFWHM =\t %.3f' % popt[2])
print('Standard Deviation = \t', sigma)



filename = 'Banana chip.csv'
data = np.genfromtxt(filename , delimiter=',', skip_header=1)

# extract x and y values from the data
x = data[:, 2]
ya2 = data[:, 3]

ya2 = ya2[0: 509]       # remove spike to inf
x = x[0: 509]



X = np.argsort(x)
x_new2 = np.zeros(len(X), dtype=float)

for i in range(0, len(X)):
    x_new2[i] = x[X[i]]

plt.plot(X, ya2)     # plots counts as function of indexes - 
plt.grid()          # so that the range over which is select data for gaussian can be chosen
plt.show()



lower_lim = input('Lower index limit for Gaussian fitting: ')
upper_lim = input('Upper index limit for Gaussian fitting: ')
x_gauss2 = x_new2[int(lower_lim) : int(upper_lim)]
y_gauss2 = ya2[int(lower_lim) : int(upper_lim)]




popt2, pcov2 = curve_fit(func, x_gauss2, y_gauss2, p0=guess, maxfev=8000)
fit2 = func(x_gauss2, *popt2)
sigma = np.abs(popt2[2]) / 2.355
d_params = np.sqrt(np.diag(pcov2))


fig, axs = plt.subplots(2, 1, constrained_layout=True)

axs[0].set_title('Fresh banana source. 1460 KeV gamma rays.')

axs[0].plot(x_new, ya, label='De-noised Data')
axs[0].plot(x_gauss, fit, 'r', ls='--', label='Gaussian Curve (Fresh)')
axs[0].fill_between(x_gauss, y_gauss, color='red', alpha=.4,)
axs[0].legend()
axs[0].grid()

axs[1].set_title('Baked banana source. 1460 KeV gamma rays.')

axs[1].plot(x_new2, ya2, label='De-noised Data')
axs[1].plot(x_gauss2, fit2, 'magenta', ls='--', label='Gaussian Curve (Chip)')
axs[1].fill_between(x_gauss2, y_gauss2, color='magenta', alpha=.4,)
axs[1].legend()
axs[1].grid()

fig.suptitle('Banana sources gamma spectrum.')

plt.ylabel('\t Count rate')
plt.xlabel('Energy (KeV)')
plt.show()

print('Chip count =  %.3f' % popt2[1])

sigma = np.abs(popt2[2]) / 2.355
print(sigma)



